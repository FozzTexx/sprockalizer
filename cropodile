#!/usr/bin/env python3
import argparse
import os
import cv2
import numpy as np
import json
from line import Bounds

def build_argparser():
  parser = argparse.ArgumentParser()
  parser.add_argument("files", nargs="+", help="input file")
  parser.add_argument("--margin", default=0, type=int, help="additional pixels to crop")
  parser.add_argument("--fps", default=18, type=int, help="frames per second")
  parser.add_argument("--flag", action="store_true", help="flag to do something")
  return parser

def cropFrame(frame, bounds, margin=0):
  h, w, d = frame.shape
  crop = Bounds((bounds.x + margin, bounds.y + margin),
                size=(bounds.width - margin * 2, bounds.height - margin * 2))
  cropped = np.zeros((crop.height, crop.width, d), np.uint8)
  source = frame[crop.y1:crop.y2, crop.x1:crop.x2]
  h, w = source.shape[:2]
  cropped[:h, :w] = source
  return cropped

def cropFile(source, margin, fps):
  print("Cropping", source)
  movie = cv2.VideoCapture(source)

  base, ext = os.path.splitext(source)

  path = base + ".crops"
  with open(path, "r") as f:
    crops = []
    while True:
      jdata = f.readline()
      if not jdata:
        break
      jdata = json.loads(jdata)
      crops.append(jdata)
  crops = np.array(crops)

  path = base + "-crop.mp4"
  four_cc = cv2.VideoWriter_fourcc(*"mp4v")
  size = Bounds(crops[0, 1:3], br=crops[0, 3:5]).size
  size.width -= margin * 2
  size.height -= margin * 2
  
  print("Writing to ", path, size)
  writer = cv2.VideoWriter(path, four_cc, fps, (size.width, size.height))

  name = os.path.basename(base)
  cv2.namedWindow(name, cv2.WINDOW_NORMAL)

  ret = movie.set(cv2.CAP_PROP_POS_FRAMES, crops[0, 0])
  
  done = True
  for row in crops:
    ret, frame = movie.read()
    bounds = Bounds(row[1:3], row[3:5])
    cropped = cropFrame(frame, bounds, margin)
    cv2.imshow(name, cropped)
    writer.write(cropped)
    key = cv2.waitKey(1)
    if key == 27:
      done = False
      break

  writer.release()
  cv2.destroyWindow(name)
  return done

def main():
  args = build_argparser().parse_args()

  for path in args.files:
    if not cropFile(path, args.margin, args.fps):
      break

  return

if __name__ == '__main__':
  exit(main() or 0)
