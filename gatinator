#!/usr/bin/env python3
#
# I am the gate finder, are you the sprocket master?

import argparse
import os
import cv2
import numpy as np
import json
from sprocket import Sprocket
from scipy import stats
import matplotlib.pyplot as plt
from gate import Gate
from line import Point, Size, Bounds
from color import *

import warnings
warnings.simplefilter('ignore', np.RankWarning)

GATE_MARGIN = 40

def build_argparser():
  parser = argparse.ArgumentParser()
  parser.add_argument("file", help="input file")
  parser.add_argument("stats", nargs="?", help="stats file to read")
  parser.add_argument("--mode", default="super8", choices=["super8", "8mm"],
                      help="type of film")
  parser.add_argument("--start", default=0, type=int, help="frame number to start at")
  parser.add_argument("--limit", type=int, help="max number of frames to process")
  parser.add_argument("--nowait", action="store_true", help="don't wait for keypress to start")
  return parser

def pass1(movie, name, start, limit, mode, nowait):
  ret = movie.set(cv2.CAP_PROP_POS_FRAMES, start)

  cv2.namedWindow(name, cv2.WINDOW_NORMAL)
  singleStep = not nowait

  frame_num = start
  edge_search = None
  edge_count = 0
  search_res = None

  sprockets = []
  while True:
    if limit is not None and frame_num == start + limit:
      break
    ret, frame = movie.read()
    if not ret:
      break
    # print(frame_num, "\r", end="")

    # FIXME - auto white point
    # FIXME - auto black point

    sprocket = Sprocket(frame, mode)
    sprockets.append(sprocket)
    if not sprocket.found:
      singleStep = singleStep or not nowait
    else:
      if search_res is None:
        search_res = Size(int(sprocket.standard.frame.width * sprocket.mm_scale),
                          int(sprocket.standard.frame.height * sprocket.mm_scale))

      y = sprocket.bounds.y1 + sprocket.bounds.height / 2
      y -= search_res.height / 2
      crop_bounds = Bounds((sprocket.bounds.x2, int(y) - GATE_MARGIN),
                           (search_res.width, search_res.height + GATE_MARGIN * 2))
      if crop_bounds.x2 > 0 and crop_bounds.y2 > 0:
        crop = frame[max(0, crop_bounds.y1):crop_bounds.y2, max(0, crop_bounds.x1):, :]
        if crop_bounds.x1 < 0 or crop_bounds.y1 < 0:
          left_pad = abs(crop_bounds.x1)
          top_pad = abs(crop_bounds.y1)
          crop = cv2.copyMakeBorder(crop, top_pad, 0, left_pad, 0, cv2.BORDER_CONSTANT, 0)
        if is_bright(crop, thresh=0.4):
          crop = crop / 255
          if edge_search is None:
            edge_search = crop
          else:
            e_res = Size(edge_search.shape[1::-1])
            c_res = Size(crop.shape[1::-1])
            width = max(e_res.width, c_res.width)
            height = max(e_res.height, c_res.height)
            if e_res.width < width or e_res.height < height:
              edge_search = cv2.copyMakeBorder(edge_search,
                                        0, height - e_res.height,
                                        0, width - e_res.width,
                                        cv2.BORDER_CONSTANT, 0)
            if c_res.width < width or c_res.height < height:
              crop = cv2.copyMakeBorder(crop,
                                        0, height - c_res.height,
                                        0, width - c_res.width,
                                        cv2.BORDER_CONSTANT, 0)

            edge_search += crop
            edge_count += 1

    annotated = frame.copy()
    label = "%i" % (frame_num)
    cv2.putText(annotated, label, (10, annotated.shape[0] - 40),
                cv2.FONT_HERSHEY_SIMPLEX, 5, (0,0,0), 15)
    cv2.putText(annotated, label, (10, annotated.shape[0] - 40),
                cv2.FONT_HERSHEY_SIMPLEX, 5, (255,255,255), 7)
    cv2.imshow(name, annotated)

    frame_num += 1

    delay = 0
    if not singleStep:
      delay = 1
    key = cv2.waitKey(delay)
    if key == 27:
      done = True
      break
    elif key == 13:
      singleStep = True
    elif key == 32:
      singleStep = not singleStep

  edge_search = edge_search / edge_count
  edge_search = edge_search * 255
  edge_search = edge_search.astype(np.uint8)

  # Find brightest pixel
  gray = cv2.cvtColor(edge_search, cv2.COLOR_BGR2GRAY)
  (minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(gray[GATE_MARGIN:-GATE_MARGIN,
                                                        GATE_MARGIN:search_res.width
                                                        - GATE_MARGIN * 2])
  edge_search = adjust_brightness(edge_search, (minLoc[0] + GATE_MARGIN,
                                                minLoc[1] + GATE_MARGIN),
                                  (maxLoc[0] + GATE_MARGIN, maxLoc[1] + GATE_MARGIN))
  
  # print(search_res, edge_search.shape[1::-1])

  stats = []
  for sprocket in sprockets:
    if sprocket.bounds:
      stats.append(sprocket.bounds.aslist
                       + [sprocket.bounds.width, sprocket.bounds.height, sprocket.mm_scale])
  stats = np.array(stats)

  spr_x = 0
  spr_y = get_mode(stats, 1)
  spr_w = get_mode(stats, 4)
  spr_h = get_mode(stats, 5)
  #spr_avg = Bounds((spr_x, spr_y), (spr_w, spr_h))
  spr_avg = Bounds((0, np.mean(stats[:, 1])), (np.mean(stats[:, 4]), np.mean(stats[:, 5])))

  sprock = Sprocket(None, mode)
  edge_res = Size(edge_search.shape[1::-1])
  sprock.top = edge_res.height / 2 - spr_avg.height / 2
  sprock.bottom = sprock.top + spr_avg.height
  sprock.right = 0
  # print("MM SCALE", sprock.mm_scale, stats[0][6])

  rel_gate = Gate(edge_search, sprock)
  rel_bounds = Bounds((rel_gate.bounds.x1, sprock.top - rel_gate.bounds.y1),
                      rel_gate.bounds.size)

  w = int(rel_bounds.width / 4)
  h = int(rel_bounds.height / 4)
  cv2.line(edge_search, (search_res.width, 0), (search_res.width, edge_res.height),
           CLR_BLUE, 5)
  cv2.line(edge_search, (0, rel_gate.bounds.y1), (w, rel_gate.bounds.y1), CLR_GREEN, 5)
  cv2.line(edge_search, (0, rel_gate.bounds.y2), (w, rel_gate.bounds.y2), CLR_GREEN, 5)
  cv2.line(edge_search, (w * 3, rel_gate.bounds.y1), (edge_res.width, rel_gate.bounds.y1),
           CLR_GREEN, 5)
  cv2.line(edge_search, (w * 3, rel_gate.bounds.y2), (edge_res.width, rel_gate.bounds.y2),
           CLR_GREEN, 5)
  cv2.line(edge_search, (rel_gate.bounds.x2, 0), (rel_gate.bounds.x2, h), CLR_GREEN, 5)
  cv2.line(edge_search, (rel_gate.bounds.x2, h * 3), (rel_gate.bounds.x2, edge_res.height),
           CLR_GREEN, 5)
  cv2.namedWindow("cropped", cv2.WINDOW_NORMAL)
  cv2.imshow("cropped", edge_search)
  cv2.waitKey(1 if nowait else 0)

  cv2.destroyAllWindows()
  return sprockets, spr_avg, edge_res, rel_bounds

def pass2(movie, name, sprockets, spr_avg, mode, edge_res, start, nowait):
  cv2.namedWindow("sprocket", cv2.WINDOW_NORMAL)
  singleStep = not nowait

  for idx, sprocket in enumerate(sprockets):
    LIMIT = 10
    prev_top = np.array([[x, y.top] for x, y in enumerate(sprockets[idx - LIMIT:idx])])
    prev_bot = np.array([[x, y.bottom] for x, y in enumerate(sprockets[idx - LIMIT:idx])])
    prev_rgt = np.array([[x, y.right] for x, y in enumerate(sprockets[idx - LIMIT:idx])])
    est_top = est_bot = est_rgt = None

    bad_top = abs(spr_avg.y1 - sprocket.top) > 10
    bad_right = abs(spr_avg.x2 - sprocket.right) > 10
    bad_height = not sprocket.bounds or abs(spr_avg.height - sprocket.bounds.height) > 15
    if len(prev_top) >= LIMIT \
       and ((bad_top and bad_height) or bad_right):

      est_top = vector(len(prev_top), prev_top)
      est_bot = vector(len(prev_bot), prev_bot)
      est_rgt = vector(len(prev_rgt), prev_rgt)

      print("BAD SPROCK", spr_avg.x2 - sprocket.right, spr_avg.y1 - sprocket.top,
            spr_avg.height - sprocket.bounds.height if sprocket.bounds else None)
      print("Bad", bad_right, bad_top, bad_height)
      print("ESTIMATE  ", est_rgt, est_top, est_bot)
      print("Average", spr_avg)
      print("This", sprocket.bounds)

      new_right = sprocket.right
      new_top = sprocket.top
      
      if bad_right:
        # FIXME - run gate on frame, check right edge distance
        qmin, qmax, remain = sprocket.discard_outliers([x[1] for x in prev_rgt])
        avg_rgt = np.average([x for x in remain if qmin < x < qmax])
        if np.isnan(avg_rgt):
          avg_rgt = spr_avg.x2
        print("BAD RIGHT", avg_rgt)
        right1 = abs(sprocket.right - avg_rgt)
        right2 = abs(sprocket.right - spr_avg.x2)
        better_right = avg_rgt
        if right2 < right1:
          better_right = spr_avg.x2
        if sprocket.right is None or abs(sprocket.right - better_right) > 10:
          new_right = better_right

      if bad_top and bad_height:
        print("BAD TOP", sprocket.bottom, est_bot)
        if sprocket.bottom is not None \
           and (abs(sprocket.bottom - est_bot) <= 10
                or abs(sprocket.bottom - spr_avg.y2) <= 10) \
           and abs(est_bot - spr_avg.y2) < 50:
          new_top = sprocket.bottom - spr_avg.height
        else:
          new_top = est_top
          
      # plt.clf()
      # plt.scatter([x.right for x in sprockets[idx - LIMIT:idx]],
      #             [x.top for x in sprockets[idx - LIMIT:idx]])
      # plt.scatter([sprocket.right], [sprocket.top])
      # plt.scatter([spr_avg.x2], [spr_avg.y1])
      # #plt.waitforbuttonpress()
      # plt.show(block=False)
      # plt.pause(0.001)
      #plt.show()
      show_frame(movie, idx+start, sprocket, new_top, new_right)
      if abs(new_top - sprocket.top) > 3:
        cv2.waitKey(0)

      sprocket_right = new_right
      sprocket.top = new_top
      sprocket.bottom = sprocket.top + spr_avg.height
      
    # if len(prev_top) >= 2 or sprocket.right is None:
    #   qmin, qmax, remain = sprocket.discard_outliers([x[1] for x in prev_rgt])
    #   avg_rgt = np.average([x for x in remain if qmin < x < qmax])
    #   if sprocket.right is None \
    #      or abs(sprocket.right - avg_rgt) > 10:
    #     sprocket.right = avg_rgt
      
    #   est_top = vector(len(prev_top), prev_top)
    #   est_bot = vector(len(prev_bot), prev_bot)
    #   est_rgt = vector(len(prev_rgt), prev_rgt)

    # if sprocket.top is None:
    #   if sprocket.bottom is None:
    #     _, _, remain = sprocket.discard_outliers(prev_top[: 1])
    #     sprocket.top = np.average(remain)
    #   else:
    #     sprocket.top = sprocket.bottom - spr_avg.height

    # if len(prev_top) >= LIMIT:
    #   top_avg = np.average(prev_top[:, 1])
    #   if abs(sprocket.top - top_avg) > 10 and abs(sprocket.top - prev_top[-1, 1]) > 10 \
    #      and (sprocket.bottom is None
    #           or abs(sprocket.bounds.height - spr_avg.height) > 10):
    #     if est_bot is not None and sprocket.bottom is not None \
    #        and abs(sprocket.bottom - est_bot) < 10:
    #       new_top = sprocket.bottom - spr_avg.height
    #     else:
    #       new_top = est_top

    #     show_frame(movie, idx+start, sprocket, new_top)
    #     sprocket.top = new_top
    #     sprocket.bottom = sprocket.top + spr_avg.height

    # if abs(sprocket.bounds.height - spr_avg.height) > 10:
    #   sprocket.bottom = sprocket.top + spr_avg.height

  cv2.destroyAllWindows()
  return

def show_frame(movie, frame_num, sprocket, new_top=None, new_right=None):
  ret = movie.set(cv2.CAP_PROP_POS_FRAMES, frame_num)
  ret, frame = movie.read()

  label = "%i" % (frame_num)
  cv2.putText(frame, label, (10, frame.shape[0] - 40),
              cv2.FONT_HERSHEY_SIMPLEX, 5, (0,0,0), 15)
  cv2.putText(frame, label, (10, frame.shape[0] - 40),
              cv2.FONT_HERSHEY_SIMPLEX, 5, (255,255,255), 7)
  
  if new_top is not None:
    cv2.line(frame, (0, int(new_top)), (frame.shape[1], int(new_top)), CLR_LBLUE, 5)
  if new_right is not None:
    cv2.line(frame, (int(new_right), 0), (int(new_right), frame.shape[0]),
             CLR_LBLUE, 5)
  if sprocket.top is not None:
    cv2.line(frame, (0, int(sprocket.top)), (frame.shape[1], int(sprocket.top)), CLR_YELLOW, 5)
  if sprocket.bottom is not None:
    cv2.line(frame, (0, int(sprocket.bottom)), (frame.shape[1], int(sprocket.bottom)),
             CLR_YELLOW, 5)
  if sprocket.right is not None:
    cv2.line(frame, (int(sprocket.right), 0), (int(sprocket.right), frame.shape[0]),
             CLR_YELLOW, 5)
  cv2.imshow("sprocket", frame)
  cv2.waitKey(1)
  return
  
def pass3(movie, name, sprockets, rel_bounds, start, nowait):
  cv2.namedWindow(name, cv2.WINDOW_NORMAL)
  cv2.namedWindow("cropped", cv2.WINDOW_NORMAL)
  singleStep = not nowait

  ret = movie.set(cv2.CAP_PROP_POS_FRAMES, start)

  crops = []
  for idx, sprocket in enumerate(sprockets):
    ret, frame = movie.read()

    gate_bounds = Bounds((int(sprocket.bounds.x2), int(sprocket.bounds.y1 - rel_bounds.y1)),
                         (int(rel_bounds.size.width), int(rel_bounds.size.height)))
    crops.append(gate_bounds)
  
    # White/black level correction
    if False and sprocket.top and sprocket.bottom:
      frame = adjust_brightness(frame, (lum_plane.shape[1] - 1, 0), (0, spr_center))

    cv2.line(frame, (0, gate_bounds.y1), (frame.shape[1], gate_bounds.y1), CLR_GREEN, 5)
    cv2.line(frame, (0, gate_bounds.y2), (frame.shape[1], gate_bounds.y2), CLR_GREEN, 5)
    cv2.line(frame, (gate_bounds.x1, 0), (gate_bounds.x1, frame.shape[0]), CLR_GREEN, 5)
    cv2.line(frame, (gate_bounds.x2, 0), (gate_bounds.x2, frame.shape[0]), CLR_GREEN, 5)

    pt1 = Point(gate_bounds.x1 + Gate.MARGIN, gate_bounds.y1 + Gate.MARGIN)
    pt2 = Point(gate_bounds.x2 - Gate.MARGIN, gate_bounds.y2 - Gate.MARGIN)
    crop_bounds = Bounds(pt1, br=pt2)
    if crop_bounds.x1 >= 0 and crop_bounds.y1 >= 0 \
       and crop_bounds.width > 0 and crop_bounds.height > 0:
      crop = frame[crop_bounds.y1:crop_bounds.y2, crop_bounds.x1:crop_bounds.x2, :]
      if crop.shape[0] and crop.shape[1]:
        cv2.imshow("cropped", crop)

    label = "%i" % (idx + start)
    cv2.putText(frame, label, (10, frame.shape[0] - 40),
                cv2.FONT_HERSHEY_SIMPLEX, 5, (0,0,0), 15)
    cv2.putText(frame, label, (10, frame.shape[0] - 40),
                cv2.FONT_HERSHEY_SIMPLEX, 5, (255,255,255), 7)
    cv2.imshow(name, frame)

    delay = 0
    if not singleStep:
      delay = 1
    key = cv2.waitKey(delay)
    if key == 27:
      done = True
      break
    elif key == 13:
      singleStep = True
    elif key == 32:
      singleStep = not singleStep

  cv2.destroyAllWindows()
  return crops

def vector(cx, points):
  x = [p[0] for p in points]
  y = [p[1] for p in points]
  b = np.polyfit(np.array(x), np.array(y), deg=2)
  e_func = np.poly1d(b)
  return e_func(cx)
  
def adjust_brightness(frame, black_loc, white_loc):
  corr_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2LAB)
  planes = cv2.split(corr_frame)
  lum_plane = 0
  lum = planes[lum_plane].astype(np.float32)
  white = lum[white_loc[1], white_loc[0]]
  black = lum[black_loc[1], black_loc[0]] / 2
  print("WHITE", white, white_loc)
  print("BLACK", black, black_loc)
  scale = 255 / (white - black)
  lum_scaled = np.clip((lum[:, :] - black) * scale, 0, 255)
  corr_frame[:, :, lum_plane] = lum_scaled
  return cv2.cvtColor(corr_frame, cv2.COLOR_LAB2BGR)

def is_bright(image, dim=10, thresh=0.5):
  image = cv2.resize(image, (dim, dim))
  image = cv2.cvtColor(image, cv2.COLOR_BGR2LAB)
  L, A, B = cv2.split(image)
  L = L/np.max(L)
  return np.mean(L) > thresh
                                
def get_mode(arr, col):
  if col is not None:
    a = arr[:, col]
  else:
    a = arr
  a = a[a[:] != None]
  if len(a) == 0:
    return None
  return stats.mode(a)[0][0]

def main():
  args = build_argparser().parse_args()

  base, ext = os.path.splitext(args.file)
  name = os.path.basename(base)
  movie = cv2.VideoCapture(args.file)

  # stats_path = base + ".stats"

  sprockets, spr_avg, edge_res, rel_bounds \
    = pass1(movie, name, args.start, args.limit, args.mode, args.nowait)
  # FIXME - write stats
  pass2(movie, name, sprockets, spr_avg, args.mode, edge_res, args.start, args.nowait)
  #   with open(stats_path, "w") as f:
  #     for idx, sprocket in enumerate(sprockets):
  #       spr_bounds = np.array([sprocket.top, sprocket.bottom, sprocket.right]).tolist()
  #       l = [args.start + idx, ] + spr_bounds
  #       f.write(json.dumps(l) + "\n")
  # else:
  #   with open(stats_path, "r") as f:
  #     stats = []
  #     while True:
  #       jdata = f.readline()
  #       if not jdata:
  #         break
  #       jdata = json.loads(jdata)
  #       spr = Sprocket(None)
  #       spr.top = jdata[0]
  #       spr.bottom = jdata[1]
  #       spr.right = jdata[2]
  #       gate = Gate(None, spr)
  #       if jdata[3] is not None:
  #         gate.bounds = Bounds(jdata[3:5], br=jdata[5:7])
  #       stats.append([spr, gate])

  crops = pass3(movie, name, sprockets, rel_bounds, args.start, args.nowait)
  wrpath = base + ".crops"
  with open(wrpath, "w") as f:
    for idx, row in enumerate(crops):
      f.write(json.dumps([args.start + idx, ] + np.array(row.aslist).tolist()) + "\n")

  return

if __name__ == '__main__':
  exit(main() or 0)
